Angular provides a powerful and flexible Forms module for handling form-related tasks in web applications. This module is based on reactive programming principles using Reactive Forms and template-driven forms. Let's explore both approaches with examples.

Reactive Forms
Reactive Forms are based on managing the form state using reactive programming techniques. This approach involves creating form controls in the component class and binding them to the form in the template.

Step 1: Import ReactiveFormsModule

// app.module.ts

import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  // ...
  imports: [ReactiveFormsModule],
  // ...
})
export class AppModule {}
Step 2: Create a Reactive Form in Component

// app.component.ts

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
})
export class AppComponent {
  // Step 3: Define a form group
  myForm: FormGroup;

  constructor(private fb: FormBuilder) {
    // Step 4: Initialize the form group
    this.myForm = this.fb.group({
      username: ['', [Validators.required, Validators.minLength(3)]],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
    });
  }

  // Step 5: Handle form submission
  onSubmit() {
    if (this.myForm.valid) {
      // Perform actions with form data
      console.log(this.myForm.value);
    }
  }
}
Step 6: Create the Form in the Template

<!-- app.component.html -->

<form [formGroup]="myForm" (ngSubmit)="onSubmit()">
  <label for="username">Username:</label>
  <input type="text" id="username" formControlName="username" />
  <div *ngIf="myForm.get('username').hasError('required') && myForm.get('username').touched">
    Username is required.
  </div>
  <div *ngIf="myForm.get('username').hasError('minlength') && myForm.get('username').touched">
    Username must be at least 3 characters.
  </div>

  <label for="email">Email:</label>
  <input type="email" id="email" formControlName="email" />
  <div *ngIf="myForm.get('email').hasError('required') && myForm.get('email').touched">
    Email is required.
  </div>
  <div *ngIf="myForm.get('email').hasError('email') && myForm.get('email').touched">
    Please enter a valid email.
  </div>

  <label for="password">Password:</label>
  <input type="password" id="password" formControlName="password" />
  <div *ngIf="myForm.get('password').hasError('required') && myForm.get('password').touched">
    Password is required.
  </div>
  <div *ngIf="myForm.get('password').hasError('minlength') && myForm.get('password').touched">
    Password must be at least 6 characters.
  </div>

  <button type="submit" [disabled]="!myForm.valid">Submit</button>
</form>
Template-Driven Forms
Template-Driven Forms rely on Angular directives in the template to create and manage the form. The form controls are created automatically based on the template.

Step 1: Import FormsModule

// app.module.ts

import { FormsModule } from '@angular/forms';

@NgModule({
  // ...
  imports: [FormsModule],
  // ...
})
export class AppModule {}
Step 2: Create a Template-Driven Form in the Template

<!-- app.component.html -->

<form #myForm="ngForm" (ngSubmit)="onSubmit()">
  <label for="username">Username:</label>
  <input
    type="text"
    id="username"
    name="username"
    ngModel
    #username="ngModel"
    required
    minlength="3"
  />
  <div *ngIf="username.errors?.required && username.touched">
    Username is required.
  </div>
  <div *ngIf="username.errors?.minlength && username.touched">
    Username must be at least 3 characters.
  </div>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email" ngModel #email="ngModel" required email />
  <div *ngIf="email.errors?.required && email.touched">Email is required.</div>
  <div *ngIf="email.errors?.email && email.touched">Please enter a valid email.</div>

  <label for="password">Password:</label>
  <input
    type="password"
    id="password"
    name="password"
    ngModel
    #password="ngModel"
    required
    minlength="6"
  />
  <div *ngIf="password.errors?.required && password.touched">Password is required.</div>
  <div *ngIf="password.errors?.minlength && password.touched">
    Password must be at least 6 characters.
  </div>

  <button type="submit" [disabled]="!myForm.form.valid">Submit</button>
</form>
Summary
Reactive Forms offer more control and flexibility, especially for complex forms and dynamic form controls. Template-Driven Forms are easier to set up and are suitable for simpler forms.

Choose the approach that fits your project's requirements and your familiarity with reactive programming. It's common to see a mix of both approaches within a single application based on the specific use case.