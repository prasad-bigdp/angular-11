Step 1: Create a New Angular Project
Open your terminal and run the following commands:
ng new dynamic-forms
cd dynamic-forms
Step 2: Create Form Component
Generate a new component to handle the dynamic forms:

ng generate component dynamic-form
Step 3: Implement Dynamic Form Logic
Replace the content of dynamic-form.component.ts with the following code:

// dynamic-form.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-dynamic-form',
  templateUrl: './dynamic-form.component.html',
  styleUrls: ['./dynamic-form.component.css'],
})
export class DynamicFormComponent implements OnInit {
  formArray: FormGroup[] = [];

  constructor(private fb: FormBuilder) {}

  ngOnInit() {
    this.addForm();
  }

  addForm() {
    const newForm = this.fb.group({
      // Define your form controls here
      title: ['', Validators.required],
      description: [''],
    });

    this.formArray.push(newForm);
  }

  deleteForm(index: number) {
    this.formArray.splice(index, 1);
  }

  saveData() {
    // Implement logic to save data from each form
    this.formArray.forEach((form, index) => {
      const formData = form.value;
      console.log(`Form ${index + 1} Data:`, formData);
    });
  }
}
Step 4: Implement Dynamic Form Template
Replace the content of dynamic-form.component.html with the following code:

<!-- dynamic-form.component.html -->

<div *ngFor="let form of formArray; let i = index" class="form-container">
  <form [formGroup]="form" class="form">
    <label>Title:</label>
    <input formControlName="title" placeholder="Enter Title" />

    <label>Description:</label>
    <textarea formControlName="description" placeholder="Enter Description"></textarea>

    <button type="button" (click)="deleteForm(i)">Delete Form</button>
  </form>
</div>

<button type="button" (click)="addForm()">Add Form</button>
<button type="button" (click)="saveData()">Save Data</button>
Step 5: Styling (Optional)
Replace the content of dynamic-form.component.css with the following code for basic styling:

/* dynamic-form.component.css */

.form-container {
  margin-bottom: 20px;
}

.form {
  border: 1px solid #ccc;
  padding: 10px;
  margin-bottom: 10px;
}

button {
  margin-top: 10px;
}
Step 6: Integrate Dynamic Form Component
Update app.component.html to include the app-dynamic-form component:

<!-- app.component.html -->

<div>
  <app-dynamic-form></app-dynamic-form>
</div>
Step 7: Run the Application
Run the following command in the terminal:


ng serve
Visit http://localhost:4200/ in your browser, and you should see the dynamic forms in action. You can add new forms, delete forms, and save the data.

FormArray:
FormArray is a class in Angular that provides the ability to create and manage an array of form controls. It is used when you need to handle dynamic lists of form controls. Here are three examples:

Example 1: Simple FormArray

import { Component } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-example1',
  template: `
    <form [formGroup]="form">
      <div formArrayName="items">
        <div *ngFor="let item of items.controls; let i = index">
          <input [formControl]="item" placeholder="Item {{ i + 1 }}" />
        </div>
      </div>
      <button (click)="addItem()">Add Item</button>
    </form>
  `,
})
export class Example1Component {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      items: this.fb.array([]),
    });
  }

  get items(): FormArray {
    return this.form.get('items') as FormArray;
  }

  addItem(): void {
    this.items.push(this.fb.control(''));
  }
}
Example 2: Dynamic FormArray Validation

import { Component } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-example2',
  template: `
    <form [formGroup]="form">
      <div formArrayName="numbers">
        <div *ngFor="let number of numbers.controls; let i = index">
          <input [formControl]="number" placeholder="Number {{ i + 1 }}" />
        </div>
      </div>
      <div *ngIf="form.get('numbers').invalid" class="error-message">
        Please enter valid numbers.
      </div>
      <button (click)="addNumber()">Add Number</button>
    </form>
  `,
})
export class Example2Component {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      numbers: this.fb.array([], [Validators.minLength(1)]),
    });
  }

  get numbers(): FormArray {
    return this.form.get('numbers') as FormArray;
  }

  addNumber(): void {
    this.numbers.push(this.fb.control('', Validators.pattern(/^\d+$/)));
  }
}
Example 3: Nested FormArray

import { Component } from '@angular/core';
import { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-example3',
  template: `
    <form [formGroup]="form">
      <div formArrayName="sections">
        <div *ngFor="let section of sections.controls; let i = index">
          <input [formControl]="section.get('name')" placeholder="Section Name" />
          <div formArrayName="items">
            <div *ngFor="let item of section.get('items').controls; let j = index">
              <input
                [formControl]="item"
                placeholder="Item {{ j + 1 }} in Section {{ i + 1 }}"
              />
            </div>
          </div>
        </div>
      </div>
      <button (click)="addSection()">Add Section</button>
    </form>
  `,
})
export class Example3Component {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      sections: this.fb.array([]),
    });
  }

  get sections(): FormArray {
    return this.form.get('sections') as FormArray;
  }

  addSection(): void {
    this.sections.push(
      this.fb.group({
        name: ['', Validators.required],
        items: this.fb.array([]),
      })
    );
  }
}
FormBuilder:
FormBuilder is a service in Angular that provides syntactic sugar for creating instances of FormGroup and FormControl. It simplifies the process of creating complex forms. Here are three examples:

Example 1: Simple FormBuilder Usage
typescript
Copy code
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-example1',
  template: `
    <form [formGroup]="form">
      <input formControlName="username" placeholder="Username" />
      <input formControlName="email" placeholder="Email" />
      <input formControlName="password" type="password" placeholder="Password" />
    </form>
  `,
})
export class Example1Component {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      username: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
    });
  }
}
Example 2: FormBuilder with Nested FormGroups

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-example2',
  template: `
    <form [formGroup]="form">
      <input formControlName="personalInfo.name" placeholder="Name" />
      <input formControlName="personalInfo.age" placeholder="Age" />
      <input formControlName="address.city" placeholder="City" />
      <input formControlName="address.zipCode" placeholder="Zip Code" />
    </form>
  `,
})
export class Example2Component {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      personalInfo: this.fb.group({
        name: ['', Validators.required],
        age: ['', Validators.required],
      }),
      address: this.fb.group({
        city: ['', Validators.required],
        zipCode: ['', Validators.required],
      }),
    });
  }
}
Example 3: FormBuilder with FormArray

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-example3',
  template: `
    <form [formGroup]="form">
      <div formArrayName="hobbies">
        <div *ngFor="let hobby of hobbies.controls; let i = index">
          <input [formControl]="hobby" placeholder="Hobby {{ i + 1 }}" />
        </div>
      </div>
      <button (click)="addHobby()">Add Hobby</button>
    </form>
  `,
})
export class Example3Component {
  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      hobbies: this.fb.array([]),
    });
  }

  get hobbies(): FormArray {
    return this.form.get('hobbies') as FormArray;
  }

  addHobby(): void {
    this.hobbies.push(this.fb.control(''));
  }
}
Project:
Step 1: Create a New Angular Project

ng new reactive-forms-demo
cd reactive-forms-demo
Step 2: Install Bootstrap (Optional)
For better styling, you can install Bootstrap:


npm install bootstrap
Include Bootstrap in the styles array in angular.json:

"styles": [
  "src/styles.css",
  "node_modules/bootstrap/dist/css/bootstrap.min.css"
],
Step 3: Create a Form Model
In the src/app folder, create a file named user.model.ts:


// user.model.ts

export class User {
  constructor(
    public username: string,
    public email: string,
    public password: string
  ) {}
}
Step 4: Create a Reactive Form
In the src/app folder, create a file named user-form.component.ts:

// user-form.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { User } from './user.model';

@Component({
  selector: 'app-user-form',
  templateUrl: './user-form.component.html',
  styleUrls: ['./user-form.component.css'],
})
export class UserFormComponent implements OnInit {
  userForm: FormGroup;

  constructor(private fb: FormBuilder) {}

  ngOnInit() {
    this.initForm();
  }

  private initForm() {
    this.userForm = this.fb.group({
      username: [
        '',
        [Validators.required, Validators.minLength(3), Validators.maxLength(20)],
      ],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
    });
  }

  onSubmit() {
    if (this.userForm.valid) {
      const newUser = new User(
        this.userForm.value.username,
        this.userForm.value.email,
        this.userForm.value.password
      );
      console.log('Submitted User:', newUser);
      // Add further logic (e.g., sending the form data to a server)
    }
  }
}
Step 5: Create the Form Template
In the src/app folder, create a file named user-form.component.html:

<!-- user-form.component.html -->

<div class="container mt-5">
  <form [formGroup]="userForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label for="username">Username:</label>
      <input
        type="text"
        class="form-control"
        id="username"
        formControlName="username"
      />
      <div
        *ngIf="
          userForm.get('username').hasError('required') &&
          userForm.get('username').touched
        "
        class="text-danger"
      >
        Username is required.
      </div>
      <div
        *ngIf="
          userForm.get('username').hasError('minlength') &&
          userForm.get('username').touched
        "
        class="text-danger"
      >
        Username must be at least 3 characters.
      </div>
      <div
        *ngIf="
          userForm.get('username').hasError('maxlength') &&
          userForm.get('username').touched
        "
        class="text-danger"
      >
        Username cannot exceed 20 characters.
      </div>
    </div>

    <div class="form-group">
      <label for="email">Email:</label>
      <input
        type="email"
        class="form-control"
        id="email"
        formControlName="email"
      />
      <div
        *ngIf="
          userForm.get('email').hasError('required') &&
          userForm.get('email').touched
        "
        class="text-danger"
      >
        Email is required.
      </div>
      <div
        *ngIf="
          userForm.get('email').hasError('email') &&
          userForm.get('email').touched
        "
        class="text-danger"
      >
        Enter a valid email address.
      </div>
    </div>

    <div class="form-group">
      <label for="password">Password:</label>
      <input
        type="password"
        class="form-control"
        id="password"
        formControlName="password"
      />
      <div
        *ngIf="
          userForm.get('password').hasError('required') &&
          userForm.get('password').touched
        "
        class="text-danger"
      >
        Password is required.
      </div>
      <div
        *ngIf="
          userForm.get('password').hasError('minlength') &&
          userForm.get('password').touched
        "
        class="text-danger"
      >
        Password must be at least 6 characters.
      </div>
    </div>

    <button type="submit" class="btn btn-primary" [disabled]="!userForm.valid">
      Submit
    </button>
  </form>
</div>
Step 6: Use the Form in App Component
In the src/app folder, create a file named app.component.html:

<!-- app.component.html -->

<app-user-form></app-user-form>
Step 7: Add Styles (Optional)
In the src/app folder, create a file named user-form.component.css:

/* user-form.component.css */

.container {
  max-width: 400px;
}
Step 8: Run the Application

ng serve
Visit http://localhost:4200/ in your browser, and you should see the reactive form in action.

